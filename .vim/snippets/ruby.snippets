snippet req
	require '${1}'${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet @
	@${1:variable} = ${2:$1}
snippet :
	:${1:key} => ${2:$1}
snippet :,
	:${1:key} => ${2:$1}, ${3}
snippet if
	if ${1:condition}
		${2}
	end
snippet option
	${1:option} = options.fetch(:${2:$1})
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet do
	do
		${1}
	end
snippet should
	should "${1}" do
		${2}
	end
snippet class class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet class class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module_function

		${2}
	end
snippet ar
	attr_reader :${1:attribute}
snippet aw
	attr_writer :${1:attribute}
snippet aa
	attr_accessor :${1:attribute}
snippet spechelper
	require 'spec_helper'
snippet desc
	describe ${1} do
		${2}
	end
snippet context
	context "${1}" do
		${2}
	end
snippet it
	it "${1}" do
		${2}
	end
snippet subject
	subject { ${1} }
snippet its
	its(:${1:attribute}) { should == ${2:value} }
snippet let
	let(:${1:name}) { ${2:value} }
snippet letfac
	let(:${1:name}) { create(:$1) }
snippet double
	${1:name} = double("${2:$1}")
snippet stub
	stub(:${1:method}) { ${2} }
